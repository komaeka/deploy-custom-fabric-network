# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

################################################################################
#
#   NOTE
#
#   从版本V3.0 Solo开始，Kafka和System Channel已经被移除，不再受支持。
#
################################################################################

---
################################################################################
#
#   ORGANIZATIONS
#
#   本节定义了可以在配置描述文件中引用的组织标识
#
################################################################################
Organizations:
    # SampleOrg使用sampleconfig定义了一个MSP。它不应在生产中使用，但可用作其他定义的模板。
    - &SampleOrg
      # Name是在通道配置事务中引用此org的关键字
      # 名称可以包括字母数字字符以及点和破折号
      Name: SampleOrg

      # 对于在创建通道时要从orderer系统通道继承的组织定义，可以将SkipAsForeign设为true。
      # 当单个组织的管理员无法访问其他组织的MSP目录时，这尤其有用。
      # 注意对于创建块时包含的组织，此属性必须始终设置为false。
      SkipAsForeign: false

      # ID是这个org的MSP定义将被引用的关键字
      # ID可以包括字母数字字符以及点和破折号
      ID: SampleOrg

      # MSPDir是包含MSP配置的文件系统路径
      MSPDir: msp

      # 策略定义了组织策略配置树的这一层的策略集，它们的规范路径通常是
      # /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
      Policies: &SampleOrgPolicies
          Readers:
              Type: Signature
              Rule: "OR('SampleOrg.member')"
              # 如果你的MSP配置了新的NodeOUs，你可能需要使用更具体的规则，如下所示：
              # Rule: "OR('SampleOrg.admin', 'SampleOrg.peer', 'SampleOrg.client')"
          Writers:
              Type: Signature
              Rule: "OR('SampleOrg.member')"
              # 如果你的MSP配置了新的NodeOUs，你可能需要使用更具体的规则，如下所示：
              # Rule: "OR('SampleOrg.admin', 'SampleOrg.client')"
          Admins:
              Type: Signature
              Rule: "OR('SampleOrg.admin')"
          Endorsement:
              Type: Signature
              Rule: "OR('SampleOrg.member')"

      # OrdererEndpoints是本组织运行的所有订购者的列表，客户端和peer节点可以分别连接到这些orderer来推送交易和接收区块。
      OrdererEndpoints:
          - "127.0.0.1:7050"

      # AnchorPeers定义了可以用于跨组织gossip通讯的peer节点的位置。
      #
      # NOTE: 仅当使用已弃用的configtxgen——outputAnchorPeersUpdate命令时设置
      # 建议使用通道配置更新流程来为每个组织设置锚节点
      AnchorPeers:
          - Host: 127.0.0.1
            Port: 7051

################################################################################
#
#   CAPABILITIES
#
#   This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # 通道功能同时适用于orderer和peer，并且必须得到双方的支持
    # 将该功能的值设置为true表示启用该功能
    Channel: &ChannelCapabilities
        # V3.0 for Channel是一个通用标记，它被确定为在v3.0.0级别上运行的所有orderer和peer所需的行为，但它将与之前版本的orderer和peer不兼容。
        # 在启用V3.0通道功能之前，请确保通道上的所有orderer和peer都是v3.0.0或更高版本。
        V3_0: true

    # 订购者功能只适用于订购者，并且可以安全地用于之前的版本。
    # 将该功能的值设置为true表示启用该功能
    Orderer: &OrdererCapabilities
        # orderer的V1.1是一个通用标记，用于表示已确定运行在v1.1.x级的所有orderer所需的行为，但与之前版本的orderer不兼容。
        # 在启用V2.0orderer功能之前，请确保通道上的所有orderer都是V2.0.0或更高版本。
        V2_0: true

    # 应用功能只适用于peer网络，可以安全地与先前发布的orderer一起使用。
    # 将该功能的值设置为true表示启用该功能
    Application: &ApplicationCapabilities
        # 应用程序V2.5支持fabric v2.5的非向后兼容新功能，即清除私人数据的功能。
        # 在启用V2.5应用程序功能之前，请确保通道上的所有peer都是v2.5.0或更高版本。
        V2_5: true

################################################################################
#
#   APPLICATION
#
#   本节定义了应用程序相关参数要编码到配置事务或创世块中的值
#
################################################################################
Application: &ApplicationDefaults
    ACLs: &ACLsDefault
        # 介绍系统中各种资源的策略默认值。这些“资源”可以是系统链码上的函数(例如，“qscc”系统链码上的“GetBlockByNumber”)
        # 或其他资源(例如，谁可以接收区块事件)
        # 本节不指定资源的定义或API，只指定资源的ACL策略
        #
        # 用户可以在通道定义中的ACL下定义映射，用自己的策略映射覆盖这些默认值

        #---新的生命周期系统链码(_lifecycle)函数用于访问控制的策略映射--#

        # ACL policy for _lifecycle's "CheckCommitReadiness" function
        _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

        # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
        _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
        _lifecycle/QueryChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinitions" function
        _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Writers

        #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

        # ACL policy for lscc's "getid" function
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetChannelConfig" function
        cscc/GetChannelConfig: /Channel/Application/Readers

        #---Miscellaneous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Writers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers

    # Organizations列出了在网络应用程序端参与的组织。
    Organizations:

    # 策略在应用策略的配置树的这个级别定义了一组策略，它们的规范路径是
    #   /Channel/Application/<PolicyName>
    Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities描述了应用程序级别的功能，请参阅本文件其他部分的Capabilities专节获得完整描述
    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#
#   ORDERER
#
#   本节定义了要编码到配置事务或创世块中的排序服务相关参数值。
#
################################################################################
Orderer: &OrdererDefaults
    # Orderer Type: The orderer implementation to start.
    # Available types are "etcdraft" and "BFT".
    # Please note that "solo" and "kafka" are no longer supported.
    OrdererType: etcdraft

    # Addresses过去是客户端和对等端可以连接到的orderer address列表。
    # 然而，这并不允许客户端将orderer addresses和orderer organizations组织关联起来，而这对于TLS验证之类的事情很有用。
    # 现在指定orderer address的首选方法是在org定义中包含OrdererEndpoints项。
    Addresses:
        # - 127.0.0.1:7050

    # Batch Timeout: The amount of time to wait before creating a batch.
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block.
    # The orderer views messages opaquely, but typically, messages may
    # be considered to be Fabric transactions.  The 'batch' is the group
    # of messages in the 'data' field of the block.  Blocks will be a few kb
    # larger than the batch size, when signatures, hashes, and other metadata
    # is applied.
    BatchSize:
        # Max Message Count: The maximum number of messages to permit in a
        # batch.  No block will contain more than this number of messages.
        MaxMessageCount: 500

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch. The maximum block size is this value
        # plus the size of the associated metadata (usually a few KB depending
        # upon the size of the signing identities). Any transaction larger than
        # this value will be rejected by ordering.
        # It is recommended not to exceed 49 MB, given the default grpc max message size of 100 MB
        # configured on orderer and peer nodes (and allowing for message expansion during communication).
        AbsoluteMaxBytes: 10 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed
        # for the serialized messages in a batch. Roughly, this field may be considered
        # the best effort maximum size of a batch. A batch will fill with messages
        # until this size is reached (or the max message count, or batch timeout is
        # exceeded).  If adding a new message to the batch would cause the batch to
        # exceed the preferred max bytes, then the current batch is closed and written
        # to a block, and a new batch containing the new message is created.  If a
        # message larger than the preferred max bytes is received, then its batch
        # will contain only that message.  Because messages may be larger than
        # preferred max bytes (up to AbsoluteMaxBytes), some batches may exceed
        # the preferred max bytes, but will always contain exactly one transaction.
        PreferredMaxBytes: 2 MB

    # Max Channels是orderer网络允许的最大通道数。当设置为0时，表示没有最大通道数。
    MaxChannels: 0

    ConsenterMapping:
        - ID: 1
          Host: bft0.example.com
          Port: 7050
          MSPID: OrdererOrg1
          Identity: /path/to/identity
          ClientTLSCert: path/to/ClientTLSCert0
          ServerTLSCert: path/to/ServerTLSCert0
        - ID: 2
          Host: bft1.example.com
          Port: 7050
          MSPID: OrdererOrg2
          Identity: /path/to/identity
          ClientTLSCert: path/to/ClientTLSCert1
          ServerTLSCert: path/to/ServerTLSCert1
        - ID: 3
          Host: bft2.example.com
          Port: 7050
          MSPID: OrdererOrg3
          Identity: /path/to/identity
          ClientTLSCert: path/to/ClientTLSCert2
          ServerTLSCert: path/to/ServerTLSCert2
        - ID: 4
          Host: bft3.example.com
          Port: 7050
          MSPID: OrdererOrg4
          Identity: /path/to/identity
          ClientTLSCert: path/to/ClientTLSCert3
          ServerTLSCert: path/to/ServerTLSCert3

    # EtcdRaft定义了在选择EtcdRaft orderertype时必须设置的配置。
    EtcdRaft:
        # 该网络的Raft复制集。对于基于etcd/raft的实现，我们希望每个副本都是OSN。
        # 因此，该列表中列举的host:port项目的子集应复制到上述Orderer.Addresses关键字下。
        Consenters:
            - Host: raft0.example.com
              Port: 7050
              ClientTLSCert: path/to/ClientTLSCert0
              ServerTLSCert: path/to/ServerTLSCert0
            - Host: raft1.example.com
              Port: 7050
              ClientTLSCert: path/to/ClientTLSCert1
              ServerTLSCert: path/to/ServerTLSCert1
            - Host: raft2.example.com
              Port: 7050
              ClientTLSCert: path/to/ClientTLSCert2
              ServerTLSCert: path/to/ServerTLSCert2

        # 为所有etcd/raft节点指定的选项。
        # 这里的值是所有新通道的默认值，可以通过配置更新对每个通道进行修改。
        Options:
            # TickInterval is the time interval between two Node.Tick invocations.
            TickInterval: 500ms

            # ElectionTick is the number of Node.Tick invocations that must pass
            # between elections. That is, if a follower does not receive any
            # message from the leader of current term before ElectionTick has
            # elapsed, it will become candidate and start an election.
            # ElectionTick must be greater than HeartbeatTick.
            ElectionTick: 10

            # HeartbeatTick is the number of Node.Tick invocations that must
            # pass between heartbeats. That is, a leader sends heartbeat
            # messages to maintain its leadership every HeartbeatTick ticks.
            HeartbeatTick: 1

            # MaxInflightBlocks limits the max number of in-flight append messages
            # during optimistic replication phase.
            MaxInflightBlocks: 5

            # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
            SnapshotIntervalSize: 16 MB

    # Organizations列出在网络的orderer参与的组织。
    Organizations:

    # 策略定义了配置树中这一层的策略集对于orderer策略，其规范路径为
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

    # Capabilities描述了orderer级别的功能，请参阅此文件中其他地方的专用功能部分以获得完整的描述
    Capabilities:
        <<: *OrdererCapabilities

################################################################################
#
#   CHANNEL
#
#   本节定义了通道相关参数在配置事务或创世块中的编码值。
#
################################################################################
Channel: &ChannelDefaults
    # Policies定义了配置树中这一层的策略集 对于通道策略，其规范路径为
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities描述了通道级别的能力，请参阅此文件中其他地方的专用能力部分以获得完整的描述
    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#
#   PROFILES
#
#   不同的配置文件可在此编码，作为参数指定给configtxgen工具。
#   指定联盟的配置文件将用于生成订购者创世区块。
#   在orderer genesis块中定义正确的联盟成员后，可以仅使用org成员名称和联盟名称生成通道创建请求。
#
################################################################################
Profiles:
    # SampleSingleMSPSolo defines a configuration which uses the Solo orderer,
    # and contains a single MSP definition (the MSP sampleconfig).
    # The Consortium SampleConsortium has only a single member, SampleOrg.
    SampleSingleMSPSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: solo
            Organizations:
                - *SampleOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *SampleOrg

    # SampleSingleMSPKafka defines a configuration that differs from the
    # SampleSingleMSPSolo one only in that it uses the Kafka-based orderer.
    SampleSingleMSPKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Organizations:
                - *SampleOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *SampleOrg

    # SampleInsecureSolo defines a configuration which uses the Solo orderer,
    # contains no MSP definitions, and allows all transactions and channel
    # creation requests for the consortium SampleConsortium.
    SampleInsecureSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: solo
        Consortiums:
            SampleConsortium:
                Organizations:

    # SampleInsecureKafka defines a configuration that differs from the
    # SampleInsecureSolo one only in that it uses the Kafka-based orderer.
    SampleInsecureKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
        Consortiums:
            SampleConsortium:
                Organizations:

    # SampleDevModeSolo定义了一个配置，该配置使用Solo orderer，包含示例MSP作为orderer和共识成员，并且仅需要基本的管理权限。
    # 它还在orderer系统通道上定义了一个应用程序，这通常应该避免。
    SampleDevModeSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: solo
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Consortiums:
            SampleConsortium:
                Organizations:
                    - <<: *SampleOrg
                      Policies:
                          <<: *SampleOrgPolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('SampleOrg.member')"

    # SampleDevModeKafka defines a configuration that differs from the
    # SampleDevModeSolo one only in that it uses the Kafka-based orderer.
    SampleDevModeKafka:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Consortiums:
            SampleConsortium:
                Organizations:
                    - <<: *SampleOrg
                      Policies:
                          <<: *SampleOrgPolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('SampleOrg.member')"

    # SampleSingleMSPChannel defines a channel with only the sample org as a
    # member. It is designed to be used in conjunction with SampleSingleMSPSolo
    # and SampleSingleMSPKafka orderer profiles.   Note, for channel creation
    # profiles, only the 'Application' section and consortium # name are
    # considered.
    SampleSingleMSPChannel:
        <<: *ChannelDefaults
        Consortium: SampleConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg

    # SampleDevModeEtcdRaft定义了一个与SampleDevModeSolo不同的配置，唯一不同的是它使用了基于etcd/raft的orderer。
    SampleDevModeEtcdRaft:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Consortiums:
            SampleConsortium:
                Organizations:
                    - <<: *SampleOrg
                      Policies:
                          <<: *SampleOrgPolicies
                          Admins:
                              Type: Signature
                              Rule: "OR('SampleOrg.member')"

    # SampleAppChannelInsecureSolo defines an application channel configuration
    # which uses the Solo orderer and contains no MSP definitions.
    SampleAppChannelInsecureSolo:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            OrdererType: solo
        Application:
            <<: *ApplicationDefaults

    # SampleAppChannelEtcdRaft定义了一个使用基于etcd/raft的orderer的应用程序通道配置。
    SampleAppChannelEtcdRaft:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"

    # SampleAppChannelSmartBft定义了一个使用Smart BFT订购器的应用程序通道配置。
    SampleAppChannelSmartBft:
        <<: *ChannelDefaults
        Consortium: SampleConsortium
        Orderer:
            <<: *OrdererDefaults
            OrdererType: BFT
            BatchSize:
                MaxMessageCount: 5000
                AbsoluteMaxBytes: 10 MB
            SmartBFT:
                RequestBatchMaxInterval: 200ms
                RequestForwardTimeout: 5s
                RequestComplainTimeout: 20s
                RequestAutoRemoveTimeout: 3m0s
                ViewChangeResendInterval: 5s
                ViewChangeTimeout: 20s
                LeaderHeartbeatTimeout: 1m0s
                CollectTimeout: 1s
                IncomingMessageBufferSize: 200
                RequestPoolSize: 100000
                LeaderHeartbeatCount: 10
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - <<: *SampleOrg
                  Policies:
                      <<: *SampleOrgPolicies
                      Admins:
                          Type: Signature
                          Rule: "OR('SampleOrg.member')"
